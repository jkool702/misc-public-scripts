#!/usr/bin/env bash

printf '\ngenerating random data for test...'
dd if=/dev/urandom of=./data bs=8M count=1 status=none
printf '...DONE\n\n'

T_all=()

shopt -s extglob
printN() (                            
        N=14                        
        for a in "$@"; do
            b=".${a##*.}"; 
            c="${a%%.*}"; 
            [[ "$b" == '.' ]] && b='';
            L=$(($N-${#b}))
            (( $L < 0 )) && L=0
            printf ' %'"$L"'i%s ' "$c" "$b"
    done
    shopt -s extglob
    if (( ${2//*(0).*(0)/} < ${3//*(0).*(0)/} )) && (( ${2//*(0).*(0)/} < ${4//*(0).*(0)/} )); then
    	printf ' %'"$N"'s\n' '(read -N)'
    elif (( ${3//*(0).*(0)/} < ${2//*(0).*(0)/} )) && (( ${3//*(0).*(0)/} < ${4//*(0).*(0)/} )); then
        printf ' %'"$N"'s\n' '(head -c)'
    elif (( ${4//*(0).*(0)/} < ${2//*(0).*(0)/} )) && (( ${4//*(0).*(0)/} < ${3//*(0).*(0)/} )); then
         printf ' %'"$N"'s\n' '(dd)'
    fi
	
)

printf '                    |------ TIME TAKEN TO READ ./data (sec) ------|\n'
printf '    BLOCK SIZE (b)      read -N         head -c            dd         (fastest)   \n'
printf '    --------------  --------------  --------------  --------------  -------------- \n'

for kk in {36..69}; do
    bs=$(( ( (1<<($kk/3)) + (1<<(($kk+1)/3)) + (1<<(($kk+2)/3)) ) / 3 ))
	T_cur=("${bs}.")

    T_cur+=("$( 
    	(
		    T0="$EPOCHREALTIME"
		    while read -r -N $bs -u $fd; do
				:
		    done 
		    T1="$EPOCHREALTIME"
		    bc <<<"${T1} - ${T0}"
    	) {fd}<./data
    )" )

    T_cur+=("$( 
    	(
	    T0="$EPOCHREALTIME"
	    while true; do
	    	head -c $bs <&$fd | wc -c | grep -qE '^0$' && break
	    done 
	    T1="$EPOCHREALTIME"
		    bc <<<"${T1} - ${T0}"
    	) {fd}<./data
    )" )

    T_cur+=("$( 
    	(
	    T0="$EPOCHREALTIME"
	    while true; do
	    	dd bs=32768 count=${bs}B status=none <&${fd} | wc -c | grep -qE '^0$' && break
	    done 
	    T1="$EPOCHREALTIME"
		    bc <<<"${T1} - ${T0}"
    	) {fd}<./data
    )" )

    T_all+=("${T_cur[@]}")

    printN "${T_cur[@]}"
done


# results
:<<'EOF'

                    |------ TIME TAKEN TO READ ./data (sec) ------|
    BLOCK SIZE (b)      read -N         head -c            dd         (fastest)   
    --------------  --------------  --------------  --------------  -------------- 
           4096        0.569099        3.196792        3.194293       (read -N)
           5461        0.544115        2.414099        2.372526       (read -N)
           6826        0.531534        1.908804        1.889067       (read -N)
           8192        0.520190        1.579094        1.570594       (read -N)
          10922        0.509917        1.171250        1.174259       (read -N)
          13653        0.500186        0.931590        0.937284       (read -N)
          16384        0.496423        0.776265        0.782645       (read -N)
          21845        0.491254        0.591104        0.587370       (read -N)
          27306        0.486192        0.466662        0.467001       (head -c)
          32768        0.484506        0.388067        0.391825       (head -c)
          43690        0.481620        0.293290        0.295840       (head -c)
          54613        0.478872        0.235113        0.240932       (head -c)
          65536        0.478415        0.196858        0.197352       (head -c)
          87381        0.476238        0.150183        0.150622       (head -c)
         109226        0.475051        0.119032        0.119522       (head -c)
         131072        0.474969        0.099470        0.099973       (head -c)
         174762        0.473997        0.077066        0.077341       (head -c)
         218453        0.473331        0.061959        0.061875            (dd)
         262144        0.473493        0.051232        0.051064            (dd)
         349525        0.473229        0.040479        0.040658       (head -c)
         436906        0.473372        0.032745        0.032806       (head -c)
         524288        0.475109        0.026499        0.026482            (dd)
         699050        0.472415        0.022113        0.021968            (dd)
         873813        0.473205        0.018218        0.017417            (dd)
        1048576        0.472910        0.015591        0.014323            (dd)
        1398101        0.476060        0.014866        0.012974            (dd)
        1747626        0.473425        0.012026        0.010141            (dd)
        2097152        0.476197        0.010753        0.009064            (dd)
        2796202        0.474133        0.011108        0.009264            (dd)
        3495253        0.478388        0.009580        0.007500            (dd)
        4194304        0.478567        0.008321        0.006485            (dd)
        5592405        0.479675        0.008249        0.006355            (dd)
        6990506        0.479756        0.008273        0.006228            (dd)
        8388608        0.477967        0.007090        0.005004            (dd)

EOF
