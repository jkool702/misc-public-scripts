#!/usr/bin/env bash

printf '\ngenerating random data for test...'
dd if=/dev/urandom of=./data bs=8M count=1 status=none
printf '...DONE\n\n'

fSize=$(wc -c <./data)

T_all=()

shopt -s extglob
printN() (                            
    shopt -s extglob
            N=14                        
        for a in "$@"; do
            b=".${a##*.}"; 
            c="${a%%.*}"; 
            [[ "$b" == '.' ]] && b='';
            L=$(($N-${#b}))
            (( $L < 0 )) && L=0
            printf ' %'"$L"'i%s ' "$c" "$b"
    done
    A=("$2" "$3" "$4")
    A=("${A[@]#0}")
    A=("${A[@]//./}")
    A=("${A[@]##@(+(0))}")
    if (( ${A[0]} < ${A[1]} )) && (( ${A[0]} < ${A[2]} )); then
    	printf ' %'"$N"'s\n' '(read -N)'
    elif (( ${A[1]} < ${A[0]} )) && (( ${A[1]} < ${A[2]} )); then
        printf ' %'"$N"'s\n' '(head -c)'
    elif (( ${A[2]} < ${A[0]} )) && (( ${A[2]} < ${A[1]} )); then
         printf ' %'"$N"'s\n' '(dd)'
    fi
	
)

printf '                    |------ TIME TAKEN TO READ ./data (sec) ------|\n'
printf '    BLOCK SIZE (b)      read -N         head -c            dd         (fastest)   \n'
printf '    --------------  --------------  --------------  --------------  -------------- \n'

for kk in {36..69}; do
    bs=$(( ( (1<<($kk/3)) + (1<<(($kk+1)/3)) + (1<<(($kk+2)/3)) ) / 3 ))
    nCur=$(( fSize / bs ))
    (( ( fSize % bs ) == 0 )) || ((nCur++))

	T_cur=("${bs}.")

    T_cur+=( "$( 
    	(
		    T0="$EPOCHREALTIME"
		    for (( nn=0; nn<nCur; nn++ )); do
		        read -r -N $bs -u $fd _
		    done 
		    T1="$EPOCHREALTIME"
	    bc <<<"${T1} - ${T0}"
    	) {fd}<./data
    )" )

    T_cur+=( "$( 
    	(
		    T0="$EPOCHREALTIME"
		    for (( nn=0; nn<nCur; nn++ )); do
		        head -c $bs <&$fd >/dev/null
		    done 
		    T1="$EPOCHREALTIME"
		    bc <<<"${T1} - ${T0}"
    	) {fd}<./data
    )" )

    T_cur+=( "$( 
    	(
		    T0="$EPOCHREALTIME"
		    for (( nn=0; nn<nCur; nn++ )); do
		    	dd bs=32768 count=${bs}B status=none <&${fd} >/dev/null
		    done 
		    T1="$EPOCHREALTIME"
		    bc <<<"${T1} - ${T0}"
    	) {fd}<./data
    )" )

    T_all+=("${T_cur[@]}")

    printN "${T_cur[@]}"
done


:<<'EOF'
                    |------ TIME TAKEN TO READ ./data (sec) ------|
    BLOCK SIZE (b)      read -N         head -c            dd         (fastest)   
    --------------  --------------  --------------  --------------  -------------- 
           4096        0.578941        2.170216        2.142991       (read -N)
           5461        0.588316        1.621292        1.616120       (read -N)
           6826        0.536212        1.304189        1.311434       (read -N)
           8192        0.527185        1.057874        1.078100       (read -N)
          10922        0.514680        0.793217        0.808867       (read -N)
          13653        0.505915        0.638244        0.655459       (read -N)
          16384        0.501701        0.534650        0.552576       (read -N)
          21845        0.493995        0.401886        0.411294       (head -c)
          27306        0.491465        0.322081        0.331764       (head -c)
          32768        0.532936        0.278114        0.283611       (head -c)
          43690        0.483219        0.240718        0.237236            (dd)
          54613        0.488641        0.166446        0.170685       (head -c)
          65536        0.485008        0.146897        0.138738            (dd)
          87381        0.479630        0.105413        0.105610       (head -c)
         109226        0.478614        0.084472        0.084822       (head -c)
         131072        0.459806        0.070525        0.070179            (dd)
         174762        0.477125        0.054718        0.054478            (dd)
         218453        0.476948        0.044619        0.043609            (dd)
         262144        0.478224        0.037094        0.035715            (dd)
         349525        0.475944        0.029661        0.028245            (dd)
         436906        0.476307        0.024302        0.022975            (dd)
         524288        0.475463        0.019914        0.018566            (dd)
         699050        0.475929        0.017029        0.015664            (dd)
         873813        0.474881        0.014166        0.012411            (dd)
        1048576        0.473411        0.011796        0.010112            (dd)
        1398101        0.475904        0.010808        0.009121            (dd)
        1747626        0.475786        0.008882        0.007055            (dd)
        2097152        0.476622        0.007640        0.005863            (dd)
        2796202        0.476494        0.007626        0.005910            (dd)
        3495253        0.480672        0.006644        0.004841            (dd)
        4194304        0.481417        0.005405        0.003696            (dd)
        5592405        0.483289        0.005491        0.003763            (dd)
        6990506        0.482893        0.005432        0.003645            (dd)
        8388608        0.481270        0.004346        0.002546            (dd)
EOF
